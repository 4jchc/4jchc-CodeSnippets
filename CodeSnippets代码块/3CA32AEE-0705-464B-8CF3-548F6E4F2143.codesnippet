<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>4jNSCacheDownImage</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//MARK: - 下载缓存图片
extension UIImageView {
    func printSomething() {
        NSLog("is Downloading")
    }
    
    func imageCacheForUrl(urlString:String) {
        let cache = NSCache()
        
        dispatch_async(dispatch_get_main_queue(), { () -&gt; Void in
            let data:NSData? = cache.objectForKey(urlString) as? NSData
            let goodData = data
            if ((goodData) != nil) {
                let image = UIImage(data: goodData!)
                self.image = image
            }
            else {
                let downloadTask: NSURLSessionDataTask = NSURLSession.sharedSession().dataTaskWithURL(NSURL(string: urlString)!, completionHandler: {(data: NSData?, response: NSURLResponse?, error: NSError?) -&gt; Void in
                    if (error != nil) {
                        // 放一张下载出错图片
                        return
                    }
                    
                    if data != nil {
                        let image = UIImage(data: data!)
                        cache.setObject(data!, forKey: urlString)
                        self.image = image
                        return
                    }
                    
                })
                downloadTask.resume()
            }
        })
    }
    
    
    func imageForUrl(urlString: String, completionHandler:(image: UIImage?, url: String) -&gt; ()) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), {()in
            let cache = NSCache()
            let data: NSData? = cache.objectForKey(urlString) as? NSData
            
            if let goodData = data {
                let image = UIImage(data: goodData)
                dispatch_async(dispatch_get_main_queue(), {() in
                    completionHandler(image: image, url: urlString)
                })
                return
            }
            
            let downloadTask: NSURLSessionDataTask = NSURLSession.sharedSession().dataTaskWithURL(NSURL(string: urlString)!, completionHandler: {(data: NSData?, response: NSURLResponse?, error: NSError?) -&gt; Void in
                if (error != nil) {
                    completionHandler(image: nil, url: urlString)
                    return
                }
                
                if data != nil {
                    let image = UIImage(data: data!)
                    cache.setObject(data!, forKey: urlString)
                    dispatch_async(dispatch_get_main_queue(), {() in
                        completionHandler(image: image, url: urlString)
                    })
                    return
                }
                
            })
            downloadTask.resume()
        })
        
    }
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>3CA32AEE-0705-464B-8CF3-548F6E4F2143</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>NSCache下载缓存图片</string>
	<key>IDECodeSnippetTitle</key>
	<string>NSCache</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
