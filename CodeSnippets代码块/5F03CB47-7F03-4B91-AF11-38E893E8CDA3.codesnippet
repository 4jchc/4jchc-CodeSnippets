<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>4jBiBao1</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//MARK: - 枚举
enum &lt;#XMPPResult#&gt;Type {
    case &lt;#LoginSuccess#&gt; //&lt;#LoginSuccess#&gt;
    case &lt;#LoginSuccess#&gt; //&lt;#LoginSuccess#&gt;
    case &lt;#LoginSuccess#&gt; //&lt;#LoginSuccess#&gt;
    case &lt;#LoginSuccess#&gt; //&lt;#LoginSuccess#&gt;
    
}
/// 1.定义闭包
typealias &lt;#闭包名称#&gt; = (&lt;#参数#&gt;:&lt;#Int#&gt;) -&gt; Void
/// 2.初始化闭包
var block:&lt;#闭包名称#&gt;!
/// 3.判断闭包 &amp;&amp; 声明赋值
self.block!!(&lt;#参数#&gt;: &lt;#名字#&gt;)
/// 4.闭包实现
&lt;#调用者#&gt;.&lt;#闭包名称#&gt; = {
    
    (&lt;#参数#&gt;:&lt;#Int#&gt;) in
    //赋值
    self.selectedIndex = selectedIndex
    
}


/// 3.判断闭包 &amp;&amp; 声明赋值
func clickCompose() {
    // 判断闭包是否被设置数值
    if &lt;#闭包名称#&gt; != nil {
        // 执行回调方法
        self.&lt;#闭包名称#&gt;!(&lt;#参数#&gt;: &lt;#名字#&gt;)
        
    }
}

/// 4.在控制器中调用闭包
// 定义回调 - Swift 中的闭包同样会对外部变量进行强引用
// 提示：weak 变量必须是 var，不能使用 let
// 在 swift 中判断闭包的循环引用和 oc 中几乎是一样的，使用 deinit
// weak 相当于OC中的 __weak , 特点对象释放之后会将变量设置为nil
// unowned 相当于OC中的 unsafe_unretained, 特点对象释放之后不会将变量设置为nil
weak var weakSelf = self
 [unowned self]
&lt;#调用者#&gt;.&lt;#闭包名称#&gt; = {
    
    (&lt;#参数#&gt;:&lt;#Int#&gt;) in
    
    
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>5F03CB47-7F03-4B91-AF11-38E893E8CDA3</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>闭包+枚举1</string>
	<key>IDECodeSnippetTitle</key>
	<string>闭包案例1</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
