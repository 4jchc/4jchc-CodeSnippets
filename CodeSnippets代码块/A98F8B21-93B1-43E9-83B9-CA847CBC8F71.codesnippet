<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>4jenum-枚举案例8</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>
import UIKit
enum MoveType:Int {
    
    case left = 0
    case right
    case Up
    case Down
    case Middle
    case DiagonallyLeftUp
    case DiagonallyLeftDown
    case DiagonallyRightUp
    case DiagonallyRightDown
    case randomXY
    case creatHang
    
    /// 枚举所以类型字符串
    private static let allTypes = (left.rawValue ... creatHang.rawValue).map{ MoveType(rawValue: $0)! }
    
}


class ViewControllerTwo: UIViewController {
    
    internal var type: MoveType = .Middle
    
    @IBInspectable var typeName: String {
        get {
            return String(self.type)
        }
        set (typeString) {
            for item in MoveType.allTypes {
                if String(item).caseInsensitiveCompare(typeString) == NSComparisonResult.OrderedSame {
                    self.type = item
                    break
                }
            }
        }
    }
    
    
enum NVActivityIndicatorShape {
    case Circle
    case CircleSemi
    case Ring
    case RingTwoHalfVertical
    case RingTwoHalfHorizontal
    case RingThirdFour
    case Rectangle
    case Triangle
    case Line
    case Pacman
    
    func createLayerWith(size size: CGSize, color: UIColor) -&gt; CALayer {
        let layer: CAShapeLayer = CAShapeLayer()
        var path: UIBezierPath = UIBezierPath()
        let lineWidth: CGFloat = 2
        
        switch self {
        case .Circle:
            path.addArcWithCenter(CGPoint(x: size.width / 2, y: size.height / 2),
                radius: size.width / 2,
                startAngle: 0,
                endAngle: CGFloat(2 * M_PI),
                clockwise: false);
            layer.fillColor = color.CGColor
        case .CircleSemi:
            path.addArcWithCenter(CGPoint(x: size.width / 2, y: size.height / 2),
                radius: size.width / 2,
                startAngle: CGFloat(-M_PI / 6),
                endAngle: CGFloat(-5 * M_PI / 6),
                clockwise: false)
            path.closePath()
            layer.fillColor = color.CGColor
        case .Ring:
            path.addArcWithCenter(CGPoint(x: size.width / 2, y: size.height / 2),
                radius: size.width / 2,
                startAngle: 0,
                endAngle: CGFloat(2 * M_PI),
                clockwise: false);
            layer.fillColor = nil
            layer.strokeColor = color.CGColor
            layer.lineWidth = lineWidth
        case .RingTwoHalfVertical:
            path.addArcWithCenter(CGPoint(x: size.width / 2, y: size.height / 2),
                radius:size.width / 2,
                startAngle:CGFloat(-3 * M_PI_4),
                endAngle:CGFloat(-M_PI_4),
                clockwise:true)
            path.moveToPoint(
                CGPoint(x: size.width / 2 - size.width / 2 * CGFloat(cos(M_PI_4)),
                    y: size.height / 2 + size.height / 2 * CGFloat(sin(M_PI_4)))
            )
            path.addArcWithCenter(CGPoint(x: size.width / 2, y: size.height / 2),
                radius:size.width / 2,
                startAngle:CGFloat(-5 * M_PI_4),
                endAngle:CGFloat(-7 * M_PI_4),
                clockwise:false)
            layer.fillColor = nil
            layer.strokeColor = color.CGColor
            layer.lineWidth = lineWidth
        case .RingTwoHalfHorizontal:
            path.addArcWithCenter(CGPoint(x: size.width / 2, y: size.height / 2),
                radius:size.width / 2,
                startAngle:CGFloat(3 * M_PI_4),
                endAngle:CGFloat(5 * M_PI_4),
                clockwise:true)
            path.moveToPoint(
                CGPoint(x: size.width / 2 + size.width / 2 * CGFloat(cos(M_PI_4)),
                    y: size.height / 2 - size.height / 2 * CGFloat(sin(M_PI_4)))
            )
            path.addArcWithCenter(CGPoint(x: size.width / 2, y: size.height / 2),
                radius:size.width / 2,
                startAngle:CGFloat(-M_PI_4),
                endAngle:CGFloat(M_PI_4),
                clockwise:true)
            layer.fillColor = nil
            layer.strokeColor = color.CGColor
            layer.lineWidth = lineWidth
        case .RingThirdFour:
            path.addArcWithCenter(CGPoint(x: size.width / 2, y: size.height / 2),
                radius: size.width / 2,
                startAngle: CGFloat(-3 * M_PI_4),
                endAngle: CGFloat(-M_PI_4),
                clockwise: false)
            layer.fillColor = nil
            layer.strokeColor = color.CGColor
            layer.lineWidth = 2
        case .Rectangle:
            path.moveToPoint(CGPoint(x: 0, y: 0))
            path.addLineToPoint(CGPoint(x: size.width, y: 0))
            path.addLineToPoint(CGPoint(x: size.width, y: size.height))
            path.addLineToPoint(CGPoint(x: 0, y: size.height))
            layer.fillColor = color.CGColor
        case .Triangle:
            let offsetY = size.height / 4
            
            path.moveToPoint(CGPoint(x: 0, y: size.height - offsetY))
            path.addLineToPoint(CGPoint(x: size.width / 2, y: size.height / 2 - offsetY))
            path.addLineToPoint(CGPoint(x: size.width, y: size.height - offsetY))
            path.closePath()
            layer.fillColor = color.CGColor
        case .Line:
            path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: size.width, height: size.height),
                cornerRadius: size.width / 2)
            layer.fillColor = color.CGColor
        case .Pacman:
            path.addArcWithCenter(CGPoint(x: size.width / 2, y: size.height / 2),
                radius: size.width / 4,
                startAngle: 0,
                endAngle: CGFloat(2 * M_PI),
                clockwise: true);
            layer.fillColor = nil
            layer.strokeColor = color.CGColor
            layer.lineWidth = size.width / 2
        }
        
        layer.backgroundColor = nil
        layer.path = path.CGPath
        
        return layer
    }
}


        for var i = 0; i &lt; 3; i++ {
            let circle = NVActivityIndicatorShape.Circle.createLayerWith(size: CGSize(width: circleSize, height: circleSize), color: color)
            let frame = CGRect(x: x + circleSize * CGFloat(i) + circleSpacing * CGFloat(i),
                y: y,
                width: circleSize,
                height: circleSize)
            
            animation.beginTime = beginTime + beginTimes[i]
            circle.frame = frame
            circle.addAnimation(animation, forKey: "animation")
            layer.addSublayer(circle)
        }</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>A98F8B21-93B1-43E9-83B9-CA847CBC8F71</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>enum-枚举案例8</string>
	<key>IDECodeSnippetTitle</key>
	<string>enum-枚举案例8</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
