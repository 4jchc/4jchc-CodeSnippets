<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>4jUIScrollViewDelegate案例</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//MARK: - UIScrollViewDelegate代理
extension &lt;#XMGEssenceViewController#&gt;:UIScrollViewDelegate {
    
    func scrollViewDidScroll(scrollView: UIScrollView) {
        // 1.获取到滑动多少
        let point:CGPoint = scrollView.contentOffset
        // 2.计算滑动的比例
        let ratio:CGFloat = 1 - point.x / scrollView.bounds.size.width;
        
        // 3.设置iconView和歌词的Label的透明度
        self.iconView.alpha = ratio;
        //self.lrcLabel.alpha = ratio;
    }
    
    //MARK: 结束滚动动画完毕调用Scrolling Animation
    func scrollViewDidEndScrollingAnimation(scrollView: UIScrollView) {
        
        // 当前的索引
        let index:Int = Int(scrollView.contentOffset.x / scrollView.width)
        // 取出子控制器
        let vc:UITableViewController = self.childViewControllers[index] as! UITableViewController
        
        vc.view.x = scrollView.contentOffset.x;
        vc.view.y = 0; // 设置控制器view的y值为0(默认是20)
        vc.view.height = scrollView.height; // 设置控制器view的height值为整个屏幕的高度(默认是比屏幕高度少个20)
        // 设置内边距
        let bottom:CGFloat = self.tabBarController!.tabBar.height;
        let top:CGFloat = CGRectGetMaxY(self.titlesView!.frame);
        
        vc.tableView.contentInset = UIEdgeInsetsMake(top, 0, bottom, 0);
        // 设置滚动条的内边距
        vc.tableView.scrollIndicatorInsets = vc.tableView.contentInset;
        scrollView.addSubview(vc.view)
        
        
    }
    //MARK: 减速完毕调用End  Decelerating减速
    func scrollViewDidEndDecelerating(scrollView: UIScrollView) {
        
        scrollViewDidEndScrollingAnimation(scrollView)
        // 点击按钮
        let index:Int = Int(scrollView.contentOffset.x / scrollView.width)
        self.titleClick(self.titlesView?.subviews[index] as! UIButton)
        
    }
    
    
    
    func viewForZoomingInScrollView(scrollView: UIScrollView) -&gt; UIView? {
        return imageView
    }
    
    // 缩放完成后会被调用一次
    func scrollViewDidEndZooming(scrollView: UIScrollView, withView view: UIView?, atScale scale: CGFloat) {
        print(__FUNCTION__)
        
        // 滚动视图边距
        let y = (self.view.bounds.height - imageView.frame.size.height) * 0.5
        scrollView.contentInset = UIEdgeInsetsMake(y, 0, 0, 0)
    }
    
    // 缩放进行中会频繁调用
    func scrollViewDidZoom(scrollView: UIScrollView) {
        print(__FUNCTION__)
    }
    
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>513397B0-BBC4-44E2-8ACF-F737D04C2AEC</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>UIScrollViewDelegate案例</string>
	<key>IDECodeSnippetTitle</key>
	<string>UIScrollViewDelegate案例</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
